generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id      @default(uuid())
  email            String   @unique
  password         String
  topics           Topics[]
}

model Topics {
  id               String              @id @default(cuid())
  topic            String
  relatedTags      RelatedTags[]
  relatedQuestions RelatedQuestions[]
  inlineVideos     InlineVideos[]
  inlineImages     InlineImages[]
  moreInfo         MoreInfo[]
  document         Document[]
  report           Reports[]
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model ScheduledTopics {
  id              String        @id @default(cuid())
  topic           String
  tags            String?
  tagsToAvoid     String?
  typeOfReport    String?
  email           String?
  scheduledReport ScheduledReports[]    
}

model Reports {
  id            String          @id @default(cuid())
  content       String
  topic         Topics          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId       String
  vector        Unsupported("vector")?
}

model ScheduledReports {
  id                String                  @id @default(cuid())
  content           String
  scheduledTopic    ScheduledTopics         @relation(fields: [scheduledTopicId], references: [id], onDelete: Cascade)
  scheduledTopicId  String
  vector            Unsupported("vector")?
}

model Document {
  id               String                 @id @default(cuid())
  content          String?
  media            String?
  date             DateTime?
  link             String?
  topic            Topics                 @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId          String
  vector           Unsupported("vector")?
}

model MoreInfo {
  id          String         @id @default(cuid())
  author      String?
  feeling     String?
  group       String?
  topic       Topics         @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
}

model RelatedTags {
  id          String       @id @default(cuid())
  tag         String?
  topic       Topics       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
}

model RelatedQuestions {
  id              String   @id @default(cuid())
  question        String?
  snippet         String?
  title           String?
  date            String?
  link            String?
  displayed_link  String?
  thumbnail       String?
  source_logo     String?
  next_page_token String?
  serpapi_link    String?
  topic           Topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId         String
}

model InlineVideos {
  id          String       @id @default(cuid())
  position    Int?
  title       String?
  link        String?
  thumbnail   String?
  channel     String?
  duration    String?
  platform    String?
  date        String?
  key_moments String?
  topic       Topics       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
}

model InlineImages {
  id          String       @id @default(cuid())
  source      String?
  thumbnail   String?
  original    String?
  title       String?
  source_name String?
  link        String?
  topic       Topics       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     String
}
